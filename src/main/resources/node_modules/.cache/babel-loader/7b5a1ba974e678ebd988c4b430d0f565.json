{"ast":null,"code":"var _jsxFileName = \"D:\\\\Universidad\\\\IETI\\\\Lab3\\\\IETI-LAB3\\\\src\\\\main\\\\resources\\\\src\\\\components\\\\login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, Button, Checkbox, FormControlLabel, Grid, Link, Paper, TextField, Typography } from \"@mui/material\";\nimport SecurityOutlinedIcon from '@mui/icons-material/SecurityOutlined';\n/*const Login=()=>{\r\n    const [ user, setUser ] = useState(\"\");\r\n    const [ pass, setPass ] = useState(\"\");\r\n    const [ btn, setBtn ] = useState(\"\");\r\n    //const [ token, setToken ] = useState(null);\r\n    //const navigate = useNavigate();\r\n    const paperStyle={padding :20, height: '70vh', width: 280, margin: '20px auto'}\r\n    const avatarStyle={backgroundColor:'#216eab'}\r\n    const txtStyle={margin: '6px 0'}\r\n    const btnStyle={margin: '8px 0'}\r\n    useEffect(() => {\r\n        fetch(`localhost:8080/v1/auth`, {method : \"POST\", body: `{\\\"email\\\" : \\\"${user}\\\",\\n\" +\r\n                \"\\\"password\\\" : \\\"${pass}\\\"}`})\r\n            .then((response) => {\r\n                // Just an example, it actually should set this token into a localStorage variable or some kind of global state.\r\n                setToken(response.token);\r\n                console.log(\"entre\")\r\n                // Once the user have been authenticated the app will navigate to the landing page\r\n                //navigate(\"/test\");\r\n            })\r\n    }, [user])\r\n    return(\r\n        <Grid>\r\n            <Paper elevation={10} style={paperStyle}>\r\n                <Grid align='center'>\r\n                    <Avatar style={avatarStyle}><SecurityOutlinedIcon/></Avatar>\r\n                    <h2>Sign in</h2>\r\n                </Grid>\r\n                <input type=\"text\" value={\"\"} onChange={e => setUser(e.target.value)} placeholder={'Enter username'} style={txtStyle} fullWidth required/>\r\n                <TextField value={\"\"} onChange={e => setPass(e.target.value)} placeholder={'Enter password'} type={'password'} fullWidth required/>\r\n                <FormControlLabel control={<Checkbox />} label=\"Remember username\" />\r\n                <Button type={'submit'} onClick={setBtn(\"\")} color={'primary'} fullWidth variant={'contained'} style={btnStyle}>Sign in</Button>\r\n                <Typography>\r\n                    <Link href={'#'}>Forgot password?</Link>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const [user, setUser] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [btn, setBtn] = useState(0);\n  const [token, setToken] = useState(\"\");\n  const paperStyle = {\n    padding: 20,\n    height: '70vh',\n    width: 280,\n    margin: '20px auto'\n  };\n  const avatarStyle = {\n    backgroundColor: '#216eab'\n  };\n  const txtStyle = {\n    margin: '6px 0'\n  };\n  const btnStyle = {\n    margin: '8px 0'\n  };\n  useEffect(() => {\n    fetch(`http://localhost:8080/v1/auth`, {\n      method: \"POST\",\n      body: `{\\\"email\\\" : \\\"${user}\\\",\\n\" +\n                \"\\\"password\\\" : \\\"${pass}\\\"}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // Just an example, it actually should set this token into a localStorage variable or some kind of global state.\n      setToken(response.token);\n      console.log(response);\n      console.log(`{\\\"email\\\" : \\\"${user}\\\",\\n\" +\n                \"\\\"password\\\" : \\\"${pass}\\\"}`);\n    });\n  }, [btn]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 10,\n      style: paperStyle,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        align: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: avatarStyle,\n          children: /*#__PURE__*/_jsxDEV(SecurityOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: 'username',\n        onChange: e => setUser(e.target.value),\n        placeholder: 'Enter username',\n        style: txtStyle,\n        fullWidth: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: 'password',\n        onChange: e => setPass(e.target.value),\n        placeholder: 'Enter password',\n        type: 'password',\n        fullWidth: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 44\n        }, this),\n        label: \"Remember username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: 'submit',\n        onClick: e => setBtn(btn + 1),\n        color: 'primary',\n        fullWidth: true,\n        variant: 'contained',\n        style: btnStyle,\n        children: \"Sign in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: '#',\n          children: \"Forgot password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"G68eJIei7y6r/8gKX0kQJut649g=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/Universidad/IETI/Lab3/IETI-LAB3/src/main/resources/src/components/login.js"],"names":["React","useEffect","useState","Avatar","Button","Checkbox","FormControlLabel","Grid","Link","Paper","TextField","Typography","SecurityOutlinedIcon","Login","user","setUser","pass","setPass","btn","setBtn","token","setToken","paperStyle","padding","height","width","margin","avatarStyle","backgroundColor","txtStyle","btnStyle","fetch","method","body","headers","then","response","console","log","e","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {Avatar, Button, Checkbox, FormControlLabel, Grid, Link, Paper, TextField, Typography} from \"@mui/material\";\r\nimport SecurityOutlinedIcon from '@mui/icons-material/SecurityOutlined';\r\n\r\n/*const Login=()=>{\r\n    const [ user, setUser ] = useState(\"\");\r\n    const [ pass, setPass ] = useState(\"\");\r\n    const [ btn, setBtn ] = useState(\"\");\r\n    //const [ token, setToken ] = useState(null);\r\n    //const navigate = useNavigate();\r\n    const paperStyle={padding :20, height: '70vh', width: 280, margin: '20px auto'}\r\n    const avatarStyle={backgroundColor:'#216eab'}\r\n    const txtStyle={margin: '6px 0'}\r\n    const btnStyle={margin: '8px 0'}\r\n    useEffect(() => {\r\n        fetch(`localhost:8080/v1/auth`, {method : \"POST\", body: `{\\\"email\\\" : \\\"${user}\\\",\\n\" +\r\n                \"\\\"password\\\" : \\\"${pass}\\\"}`})\r\n            .then((response) => {\r\n                // Just an example, it actually should set this token into a localStorage variable or some kind of global state.\r\n                setToken(response.token);\r\n                console.log(\"entre\")\r\n                // Once the user have been authenticated the app will navigate to the landing page\r\n                //navigate(\"/test\");\r\n            })\r\n    }, [user])\r\n    return(\r\n        <Grid>\r\n            <Paper elevation={10} style={paperStyle}>\r\n                <Grid align='center'>\r\n                    <Avatar style={avatarStyle}><SecurityOutlinedIcon/></Avatar>\r\n                    <h2>Sign in</h2>\r\n                </Grid>\r\n                <input type=\"text\" value={\"\"} onChange={e => setUser(e.target.value)} placeholder={'Enter username'} style={txtStyle} fullWidth required/>\r\n                <TextField value={\"\"} onChange={e => setPass(e.target.value)} placeholder={'Enter password'} type={'password'} fullWidth required/>\r\n                <FormControlLabel control={<Checkbox />} label=\"Remember username\" />\r\n                <Button type={'submit'} onClick={setBtn(\"\")} color={'primary'} fullWidth variant={'contained'} style={btnStyle}>Sign in</Button>\r\n                <Typography>\r\n                    <Link href={'#'}>Forgot password?</Link>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}*/\r\n\r\nconst Login=()=>{\r\n    const [ user, setUser ] = useState(\"\");\r\n    const [ pass, setPass ] = useState(\"\");\r\n    const [ btn, setBtn ] = useState(0);\r\n    const [ token, setToken ] = useState(\"\");\r\n    const paperStyle={padding :20, height: '70vh', width: 280, margin: '20px auto'}\r\n    const avatarStyle={backgroundColor:'#216eab'}\r\n    const txtStyle={margin: '6px 0'}\r\n    const btnStyle={margin: '8px 0'}\r\n    useEffect(()=>{\r\n        fetch(`http://localhost:8080/v1/auth`, {method : \"POST\", body: `{\\\"email\\\" : \\\"${user}\\\",\\n\" +\r\n                \"\\\"password\\\" : \\\"${pass}\\\"}`, headers : {'Content-Type':'application/json'}})\r\n            .then((response) => {\r\n                // Just an example, it actually should set this token into a localStorage variable or some kind of global state.\r\n                setToken(response.token);\r\n                console.log(response);\r\n                console.log(`{\\\"email\\\" : \\\"${user}\\\",\\n\" +\r\n                \"\\\"password\\\" : \\\"${pass}\\\"}`);\r\n    })},[btn])\r\n    return(\r\n        <Grid>\r\n            <Paper elevation={10} style={paperStyle}>\r\n                <Grid align='center'>\r\n                    <Avatar style={avatarStyle}><SecurityOutlinedIcon/></Avatar>\r\n                    <h2>Sign in</h2>\r\n                </Grid>\r\n                <TextField label={'username'} onChange={e => setUser(e.target.value)} placeholder={'Enter username'} style={txtStyle} fullWidth required/>\r\n                <TextField label={'password'} onChange={e => setPass(e.target.value)} placeholder={'Enter password'} type={'password'} fullWidth required/>\r\n                <FormControlLabel control={<Checkbox />} label=\"Remember username\" />\r\n                <Button type={'submit'} onClick={e => setBtn(btn+1)}color={'primary'} fullWidth variant={'contained'} style={btnStyle}>Sign in</Button>\r\n                <Typography>\r\n                    <Link href={'#'}>Forgot password?</Link>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}